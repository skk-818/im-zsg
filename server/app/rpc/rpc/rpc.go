// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.4
// Source: rpc.proto

package rpc

import (
	"context"

	"server/app/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AuthLoginRequest  = pb.AuthLoginRequest
	AuthLoginResponse = pb.AuthLoginResponse
	LoginRequest      = pb.LoginRequest
	LoginResponse     = pb.LoginResponse
	LogoutRequest     = pb.LogoutRequest
	LogoutResponse    = pb.LogoutResponse
	PostMsg           = pb.PostMsg
	PostResponse      = pb.PostResponse

	Rpc interface {
		// edge 进行登录
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
		PostMessage(ctx context.Context, in *PostMsg, opts ...grpc.CallOption) (*PostResponse, error)
		// 业务部分
		AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error)
	}

	defaultRpc struct {
		cli zrpc.Client
	}
)

func NewRpc(cli zrpc.Client) Rpc {
	return &defaultRpc{
		cli: cli,
	}
}

// edge 进行登录
func (m *defaultRpc) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := pb.NewRpcClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultRpc) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	client := pb.NewRpcClient(m.cli.Conn())
	return client.Logout(ctx, in, opts...)
}

func (m *defaultRpc) PostMessage(ctx context.Context, in *PostMsg, opts ...grpc.CallOption) (*PostResponse, error) {
	client := pb.NewRpcClient(m.cli.Conn())
	return client.PostMessage(ctx, in, opts...)
}

// 业务部分
func (m *defaultRpc) AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error) {
	client := pb.NewRpcClient(m.cli.Conn())
	return client.AuthLogin(ctx, in, opts...)
}
